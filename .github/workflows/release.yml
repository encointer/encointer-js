name: Release Packages

on:
  push:
    tags:
      - 'v*.*.*'          # matches v1.2.3
      - 'v*.*.*-*'        # matches v1.2.3-alpha.0

permissions:
  contents: read
  id-token: write # for npm Trusted Publishing

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org/'

      # üß∂ Yarn zero-install setup
      - name: Configure Yarn
        run: |
          corepack enable
          yarn config set enableImmutableInstalls false

      - name: Validate Yarn setup
        run: yarn workspaces focus --all --production=false

      # üß© Verify that tag and versions match before building
      - name: Verify tag and package versions
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "üîç Verifying tag: $TAG"

          # remove leading "v" and compare
          VERSION="${TAG#v}"
          ROOT_VERSION=$(node -p "require('./lerna.json').version")

          if [ "$VERSION" != "$ROOT_VERSION" ]; then
            echo "‚ùå Tag version ($VERSION) does not match lerna.json version ($ROOT_VERSION)"
            exit 1
          fi

          # verify all packages' versions match the root version
          npx lerna list --json | jq -r '.[].location' | while read -r pkg; do
            PKG_VERSION=$(node -p "require('$pkg/package.json').version")
            if [ "$PKG_VERSION" != "$ROOT_VERSION" ]; then
              echo "‚ùå Version mismatch in $pkg: expected $ROOT_VERSION, found $PKG_VERSION"
              exit 1
            fi
          done

          echo "‚úÖ All versions match tag $TAG"

      - name: Build packages
        run: yarn build

      # üöÄ Publish to npm
      - name: Publish to npm
        run: |
          # Detect if this is a pre-release (e.g. v1.2.3-alpha.0)
          TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${TAG#v}"

          if [[ "$VERSION" == *"-"* ]]; then
            echo "Pre-release detected: $VERSION"
            npx lerna publish from-package --contents build --dist-tag next --yes
          else
            echo "Stable release detected: $VERSION"
            npx lerna publish from-package --contents build --yes
          fi
        env:
          NPM_CONFIG_PROVENANCE: true
