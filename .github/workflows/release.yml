name: Release Packages

on:
  push:
    tags:
      - 'v*' # trigger for all tags, including prereleases

permissions:
  contents: read
  id-token: write # required for npm Trusted Publishing

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for Lerna + version matching

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'

      - name: Enable corepack / Yarn
        run: |
          corepack enable
          yarn config set enableImmutableInstalls false

      - name: Prepare workspace
        run: yarn workspaces focus --all --production=false

      - name: Verify tag consistency
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "Detected tag: $TAG"

          VERSION=${TAG#v}
          echo "Expected version in packages: $VERSION"

          # Verify all workspace versions match
          ERR=false
          for PKG in $(find packages -name package.json); do
            PKG_VERSION=$(jq -r .version "$PKG")
            if [ "$PKG_VERSION" != "$VERSION" ]; then
              echo "❌ Version mismatch in $PKG ($PKG_VERSION != $VERSION)"
              ERR=true
            fi
          done
          if [ "$ERR" = true ]; then
            echo "Version mismatch detected, aborting release."
            exit 1
          fi

      - name: Build packages
        run: yarn build

      - name: Detect prerelease channel
        id: detect
        run: |
          TAG=$(git describe --tags --abbrev=0)
          VERSION=${TAG#v}
          if [[ "$VERSION" == *-* ]]; then
            # Extract prerelease name before the dot, e.g. "alpha" from "1.2.3-alpha.0"
            CHANNEL=$(echo "$VERSION" | sed -E 's/^[0-9]+\.[0-9]+\.[0-9]+-([a-zA-Z0-9]+).*/\1/')
          else
            CHANNEL=latest
          fi
          echo "channel=$CHANNEL" >> $GITHUB_OUTPUT
          echo "Publishing to dist-tag: $CHANNEL"

      - name: Publish to npm
        run: npx lerna publish from-package --contents build --yes --dist-tag ${{ steps.detect.outputs.channel }}
        env:
          NPM_CONFIG_PROVENANCE: true
